add:
追加、変更したファイルをステージングエリアに追加する。
git add -i で対話モードとなり、git add -pで特に便利なパッチモードとなる。

commit:
ステージされたファイルをローカルリポジトリに追加する。
addされたものをcommitするのが普通だが、git commit -m "" -aで
変更されたすべてをadd,commitまとめてできる。
-m "" のかわりに -C コミット名 とすることで、そのコミットのログメッセージにできる。
-aのところにcommitしたいファイル名を入れることもできる。

clone:
git clone url で、リポジトリのクローンを作れる。

fetch:
自分のリモートブランチが更新される。ローカルブランチは更新されない。

pull:
リモートリポジトリから変更を取得し、同時にローカルブランチにマージする。
git pull origin masterなど。

push:
リモートリポジトリにローカルの変更をプッシュする。



履歴シリーズ

status:
現在の状況を見る。

diff:
変更された差分を見る。
パラメータなしで呼ぶと、作業ツリーとステージングエリアの差分が見れる。
--cachedをつけると、ステージングエリアとリポジトリの差分が見れる。
git diff コミット名 で、そのコミットから現在までの差分を見れる。
--statをつけると、統計情報を表示する。

mv:
名前を変える。git mv a bでファイル名aをファイル名bにする。

log:
それまでのcommit履歴が見れる。
-Nで最新のN件が見れる。--pretty=onelineで一行で見れる。
git log コミット名でそのコミットまでのものを見れる。
git log コミット名..でそのコミットの次のものからを見れる。
--since="5 hours"で直近５時間のものを見れる。
最新のコミット名はHEADで置き換えられる。
コミット名の次に^をつけると一つ前という意味になる。
コミット名の次に~NをつけるとNつ前という意味になる

blame:
だれがいつどのコミットで書いたかなどがわかる。
git blame -L N,M ファイル名 で、そのファイルのN〜M行目について見れる。
git blame -L N,+M ファイル名 で、そのファイルのN行目からM行見れる。
-Mをつけることで、三行以上のコピペされたコードは同じコミットと扱われたものが見れる。
-C -Cをつけることで、どのファイルからコピペされたかもわかる。


特に履歴の修正シリーズ
--amend:
git commit --amendで直前のコミットを訂正できる。

revert:
git revert -n コミット名でそのコミットの取り消し予約をする。
その後、git commitでコミットを取り消せる。

reset:
git reset コミット名 で、そのコミットの状態までリセットしてくれる。
--softなら作業ツリーはそのままにコミットのみを取り消す。
--hardだと作業ツリーでの変更もなかったことにされるので注意。

rebase:
git rebase -i HEAD~N で直近N件のコミットについてあれこれできる。
pick コミット名 となっているものの順番を単純に変えることで、コミットの順番を変えられる。
pickをsquashにすることで、そのコミットとその前のコミットを一つのコミットに圧縮できる。
一つのコミットを複数に分割するには、pickをeditにする。
すると一回そこまで戻ってくれるので、reset --softでコミットを取り消し、複数に分けてコミットしなおし、rebase --continueする。
また、git rebase タグ名 で現在のブランチにタグの時の状況をマージできる。


ブランチシリーズ

branch:
新しいブランチを作る。
また、現在のブランチの一覧も見れる。
-d で削除できる。

checkout:
ブランチを切り替える。
git checkout -b new oldで、oldというブランチに基づいてnewというブランチを作り、そこに移動する。

merge:
ブランチ間で変更を併合する。
masterブランチでgit merge otherで、otherブランチからの変更がmasterブランチにマージされる。
git merge --squash otherで、otherブランチでの複数のコミットが一つのcommitに圧縮され今いるブランチにステージングされる。

cherry-pick:
git cherry-pick コミット名で、他ブランチでのコミットをマージしたいものだけマージしてコミットされる。

tag:
ある時点での状態をgit tag タグ名 で保存できる。
ブランチを消したとしてもタグは残るため、リリースブランチなどを保存するのに役立つ。
つまり、リリースブランチを作る→バグを直す→タグをつける→リリースブランチを消せる。

submodule:正直よくわからん。
リポジトリの中に別のリポジトリを履歴を別にしたまま格納する。
git submodule add url 名前 でサブモジュールを追加できる。
git submodule init 名前 し、git sumodule update 名前 する。


発展
gc:
git内部の履歴の格納方法を最適化してきれいに片づけてくれる。
たまにやるといい。

archive:
アーカイブを作る。
git archive --format=zip HEAD > mysite-release.zip
